{"ast":null,"code":"'use strict';module.exports=function spread(callback){return function wrap(arr){return callback.apply(null,arr);};};","map":{"version":3,"sources":["C:/Users/aines/Desktop/book-santa-stage-11-master/node_modules/react-native-google-books/node_modules/axios/lib/helpers/spread.js"],"names":["module","exports","spread","callback","wrap","arr","apply"],"mappings":"AAAA,aAsBAA,MAAM,CAACC,OAAP,CAAiB,QAASC,CAAAA,MAAT,CAAgBC,QAAhB,CAA0B,CACzC,MAAO,SAASC,CAAAA,IAAT,CAAcC,GAAd,CAAmB,CACxB,MAAOF,CAAAA,QAAQ,CAACG,KAAT,CAAe,IAAf,CAAqBD,GAArB,CAAP,CACD,CAFD,CAGD,CAJD","sourcesContent":["'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n"]},"metadata":{},"sourceType":"script"}